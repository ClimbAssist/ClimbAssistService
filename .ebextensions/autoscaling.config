Resources:
  AWSEBAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  AWSEBAutoScalingLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        "Fn::Base64":
          "Fn::Join":
          - ""
          - - |-
              Content-Type: multipart/mixed; boundary="===============5189065377222898407=="
              MIME-Version: 1.0

              --===============5189065377222898407==
              Content-Type: text/cloud-config; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="cloud-config.txt"

              #cloud-config
              repo_upgrade: none
            - "\nrepo_releasever: "
            - Fn::FindInMap:
              - ContainerMeta
              - AMIMeta
              - RepoReleaseVersion
            - "\n"
            - Fn::FindInMap:
              - AWSEBOptions
              - options
              - CloudConfigOptions
            - |-

              --===============5189065377222898407==
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="user-data.txt"

              #!/bin/bash
              exec > >(tee -a /var/log/eb-cfn-init.log|logger -t [eb-cfn-init] -s 2>/dev/console) 2>&1
              echo [`date -u +"%Y-%m-%dT%H:%M:%SZ"`] Started EB User Data
              set -x

              # This signals the auto scaling group that the instance launched successfully
              yum update -y aws-cfn-bootstrap
              /opt/aws/bin/cfn-signal -e $? --stack
            - ' '
            - Ref: AWS::StackName
            - ' '
            - --resource AWSEBAutoScalingGroup --region
            - ' '
            - Ref: AWS::Region
            - |


              function sleep_delay
              {
                if (( $SLEEP_TIME < $SLEEP_TIME_MAX )); then
                  echo Sleeping $SLEEP_TIME
                  sleep $SLEEP_TIME
                  SLEEP_TIME=$(($SLEEP_TIME * 2))
                else
                  echo Sleeping $SLEEP_TIME_MAX
                  sleep $SLEEP_TIME_MAX
                fi
              }

              # Executing bootstrap script
              SLEEP_TIME=10
              SLEEP_TIME_MAX=3600
              while true; do
            - "  curl "
            - Fn::FindInMap:
              - AWSEBOptions
              - options
              - UserDataScript
            - " > /tmp/ebbootstrap.sh\n"
            - "  RESULT=$?\n"
            - "  if [[ \"$RESULT\" -ne 0 ]]; then\n"
            - "    sleep_delay\n"
            - "  else\n"
            - "    /bin/bash /tmp/ebbootstrap.sh     '"
            - Fn::FindInMap:
              - AWSEBOptions
              - options
              - rpms
            - |-
              '    '
            - Fn::FindInMap:
              - AWSEBOptions
              - options
              - tarballs
            - |-
              '    '
            - Fn::FindInMap:
              - AWSEBOptions
              - options
              - ebgems
            - |-
              '    '
            - Ref: AWSEBInstanceLaunchWaitHandle
            - |-
              '    '
            - Ref: AWS::StackId
            - |-
              '    '
            - Ref: AWS::Region
            - |-
              '    '
            - Fn::FindInMap:
              - AWSEBOptions
              - options
              - guid
            - |-
              '    '
            - Fn::FindInMap:
              - AWSEBOptions
              - options
              - AWSEBHealthdGroupId
            - |-
              '    '
            - Fn::FindInMap:
              - AWSEBOptions
              - options
              - AWSEBHealthdEndpoint
            - |-
              '    '
            - Fn::FindInMap:
              - AWSEBOptions
              - options
              - ProxyServer
            - |-
              '    '
            - Fn::FindInMap:
              - AWSEBOptions
              - options
              - HealthdProxyLogLocation
            - |-
              '    &&
                  exit 0
                fi
              done
            - "\n"
